"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Deployment environment options
ENV_LOCAL = 'local'
ENV_PROD = 'prod'
ENV_DEV = 'dev'
ENV_OPTIONS = [ENV_LOCAL, ENV_DEV, ENV_PROD]

if 'JGENV' not in os.environ:
    raise RuntimeError(
        "No JGENV specified. Choose '{}' for local development.".format(
            ENV_LOCAL
        )
    )
if os.environ['JGENV'] not in ENV_OPTIONS:
    raise RuntimeError(
        "Invalid JGENV specified. Choose '{}' for local development.".format(
            ENV_LOCAL
        )
    )
ENV = os.environ['JGENV']

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if ENV == ENV_LOCAL:
    SECRET_KEY = 'django-insecure-#xj+on*qb$1+&ktfv-u(d%*)ucsl0=j1-s6v38=crugaum*s87'
else:
    with open(os.path.join(BASE_DIR, '../config/secret_key.txt')) as f:
        SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV in [ENV_LOCAL, ENV_DEV]

if ENV == ENV_LOCAL:
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1'
    ]
elif ENV == ENV_DEV:
    ALLOWED_HOSTS = [
        'ec2-54-237-91-22.compute-1.amazonaws.com',
        '54.237.91.22',
    ]
elif ENV == ENV_PROD:
    ALLOWED_HOSTS = [
        'joshuasgallery.com',
        '3.90.5.177'
    ]
else:
    raise RuntimeError("No ALLOWED_HOSTS defined for ENV '{}'".format(ENV))

CSRF_TRUSTED_ORIGINS = ["https://joshuasgallery.com"]

# Application definition

INSTALLED_APPS = [
    'gallery.apps.GalleryConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap5',
    'imagekit',
    'django_cleanup.apps.CleanupConfig',
]

CRISPY_TEMPLATE_PACK = 'bootstrap5'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
if ENV == ENV_LOCAL:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif ENV == ENV_DEV:
    with open(os.path.join(BASE_DIR, '../config/jg-dev-freetier_pw.txt')) as f:
        DB_PW = f.read().strip()
    DATABASES = {
        'default': {
            # this DB has been created in the RDS instance
            'NAME': 'jg_dev',
            'ENGINE': 'django.db.backends.mysql',
            'USER': 'admin',
            'PASSWORD': DB_PW,
            'HOST': 'jg-dev-freetier.c6ytnqpjyedh.us-east-1.rds.amazonaws.com',
            'POST': '3306',
        }
    }
elif ENV == ENV_PROD:
    with open(os.path.join(BASE_DIR, '../config/database-jg-prod-pw.txt')) as f:
        DB_PW = f.read().strip()
    DATABASES = {
        'default': {
            # this DB has been created in the RDS instance
            'NAME': 'jgprod',
            'ENGINE': 'django.db.backends.mysql',
            'USER': 'admin',
            'PASSWORD': DB_PW,
            'HOST': 'database-jg-prod.cluster-c6ytnqpjyedh.us-east-1.rds.amazonaws.com',
            'POST': '3306',
        }
    }
else:
    raise RuntimeError("No DATABASES defined for ENV '{}'".format(ENV))

# Media file storage location
if ENV == ENV_LOCAL:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'
elif ENV == ENV_DEV:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_STORAGE_BUCKET_NAME = 'bucket-jg-dev'
    AWS_S3_REGION_NAME = 'us-east-1'
elif ENV == ENV_PROD:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_STORAGE_BUCKET_NAME = 'bucket-jg-prod'
    AWS_S3_REGION_NAME = 'us-east-1'
else:
    raise RuntimeError("No media storage location defined for ENV '{}'".format(ENV))

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
